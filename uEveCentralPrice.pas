unit uEveCentralPrice;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.64
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2015-03-14 17:17:44
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

TForQueryClass_002 = class
private
  FBid: Boolean;
  FHours: Extended;
  FMinq: Extended;
  FRegions: TArray<Extended>;
  FSystems: TArray<Extended>;
  FTypes: TArray<Extended>;
public
  property bid: Boolean read FBid write FBid;
  property hours: Extended read FHours write FHours;
  property minq: Extended read FMinq write FMinq;
  property regions: TArray<Extended> read FRegions write FRegions;
  property systems: TArray<Extended> read FSystems write FSystems;
  property types: TArray<Extended> read FTypes write FTypes;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TForQueryClass_002;
end;

TSellClass = class
private
  FAvg: Extended;
  FFivePercent: Extended;
  FForQuery: TForQueryClass_002;
  FGenerated: Extended;
  FHighToLow: Boolean;
  FMax: Extended;
  FMedian: Extended;
  FMin: Extended;
  FStdDev: Extended;
  FVariance: Extended;
  FVolume: Extended;
  FWavg: Extended;
public
  property avg: Extended read FAvg write FAvg;
  property fivePercent: Extended read FFivePercent write FFivePercent;
  property forQuery: TForQueryClass_002 read FForQuery write FForQuery;
  property generated: Extended read FGenerated write FGenerated;
  property highToLow: Boolean read FHighToLow write FHighToLow;
  property max: Extended read FMax write FMax;
  property median: Extended read FMedian write FMedian;
  property min: Extended read FMin write FMin;
  property stdDev: Extended read FStdDev write FStdDev;
  property variance: Extended read FVariance write FVariance;
  property volume: Extended read FVolume write FVolume;
  property wavg: Extended read FWavg write FWavg;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSellClass;
end;

TForQueryClass_001 = class
private
  FHours: Extended;
  FMinq: Extended;
  FRegions: TArray<Extended>;
  FSystems: TArray<Extended>;
  FTypes: TArray<Extended>;
public
  property hours: Extended read FHours write FHours;
  property minq: Extended read FMinq write FMinq;
  property regions: TArray<Extended> read FRegions write FRegions;
  property systems: TArray<Extended> read FSystems write FSystems;
  property types: TArray<Extended> read FTypes write FTypes;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TForQueryClass_001;
end;

TAllClass = class
private
  FAvg: Extended;
  FFivePercent: Extended;
  FForQuery: TForQueryClass_001;
  FGenerated: Extended;
  FHighToLow: Boolean;
  FMax: Extended;
  FMedian: Extended;
  FMin: Extended;
  FStdDev: Extended;
  FVariance: Extended;
  FVolume: Extended;
  FWavg: Extended;
public
  property avg: Extended read FAvg write FAvg;
  property fivePercent: Extended read FFivePercent write FFivePercent;
  property forQuery: TForQueryClass_001 read FForQuery write FForQuery;
  property generated: Extended read FGenerated write FGenerated;
  property highToLow: Boolean read FHighToLow write FHighToLow;
  property max: Extended read FMax write FMax;
  property median: Extended read FMedian write FMedian;
  property min: Extended read FMin write FMin;
  property stdDev: Extended read FStdDev write FStdDev;
  property variance: Extended read FVariance write FVariance;
  property volume: Extended read FVolume write FVolume;
  property wavg: Extended read FWavg write FWavg;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TAllClass;
end;

TForQueryClass = class
private
  FBid: Boolean;
  FHours: Extended;
  FMinq: Extended;
  FRegions: TArray<Extended>;
  FSystems: TArray<Extended>;
  FTypes: TArray<Extended>;
public
  property bid: Boolean read FBid write FBid;
  property hours: Extended read FHours write FHours;
  property minq: Extended read FMinq write FMinq;
  property regions: TArray<Extended> read FRegions write FRegions;
  property systems: TArray<Extended> read FSystems write FSystems;
  property types: TArray<Extended> read FTypes write FTypes;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TForQueryClass;
end;

TBuyClass = class
private
  FAvg: Extended;
  FFivePercent: Extended;
  FForQuery: TForQueryClass;
  FGenerated: Extended;
  FHighToLow: Boolean;
  FMax: Extended;
  FMedian: Extended;
  FMin: Extended;
  FStdDev: Extended;
  FVariance: Extended;
  FVolume: Extended;
  FWavg: Extended;
public
  property avg: Extended read FAvg write FAvg;
  property fivePercent: Extended read FFivePercent write FFivePercent;
  property forQuery: TForQueryClass read FForQuery write FForQuery;
  property generated: Extended read FGenerated write FGenerated;
  property highToLow: Boolean read FHighToLow write FHighToLow;
  property max: Extended read FMax write FMax;
  property median: Extended read FMedian write FMedian;
  property min: Extended read FMin write FMin;
  property stdDev: Extended read FStdDev write FStdDev;
  property variance: Extended read FVariance write FVariance;
  property volume: Extended read FVolume write FVolume;
  property wavg: Extended read FWavg write FWavg;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TBuyClass;
end;

TItemClass = class
private
  FAll: TAllClass;
  FBuy: TBuyClass;
  FSell: TSellClass;
public
  property all: TAllClass read FAll write FAll;
  property buy: TBuyClass read FBuy write FBuy;
  property sell: TSellClass read FSell write FSell;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TItemClass;
end;

TRootClass = class
private
  FItems: TArray<TItemClass>;
public
  property Items: TArray<TItemClass> read FItems write FItems;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TRootClass;
end;

implementation

{TForQueryClass_002}


function TForQueryClass_002.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TForQueryClass_002.FromJsonString(AJsonString: string): TForQueryClass_002;
begin
  result := TJson.JsonToObject<TForQueryClass_002>(AJsonString)
end;

{TSellClass}

constructor TSellClass.Create;
begin
  inherited;
  FForQuery := TForQueryClass_002.Create();
end;

destructor TSellClass.Destroy;
begin
  FForQuery.free;
  inherited;
end;

function TSellClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSellClass.FromJsonString(AJsonString: string): TSellClass;
begin
  result := TJson.JsonToObject<TSellClass>(AJsonString)
end;

{TForQueryClass_001}


function TForQueryClass_001.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TForQueryClass_001.FromJsonString(AJsonString: string): TForQueryClass_001;
begin
  result := TJson.JsonToObject<TForQueryClass_001>(AJsonString)
end;

{TAllClass}

constructor TAllClass.Create;
begin
  inherited;
  FForQuery := TForQueryClass_001.Create();
end;

destructor TAllClass.Destroy;
begin
  FForQuery.free;
  inherited;
end;

function TAllClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TAllClass.FromJsonString(AJsonString: string): TAllClass;
begin
  result := TJson.JsonToObject<TAllClass>(AJsonString)
end;

{TForQueryClass}


function TForQueryClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TForQueryClass.FromJsonString(AJsonString: string): TForQueryClass;
begin
  result := TJson.JsonToObject<TForQueryClass>(AJsonString)
end;

{TBuyClass}

constructor TBuyClass.Create;
begin
  inherited;
  FForQuery := TForQueryClass.Create();
end;

destructor TBuyClass.Destroy;
begin
  FForQuery.free;
  inherited;
end;

function TBuyClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TBuyClass.FromJsonString(AJsonString: string): TBuyClass;
begin
  result := TJson.JsonToObject<TBuyClass>(AJsonString)
end;

{TItemClass}

constructor TItemClass.Create;
begin
  inherited;
  FBuy := TBuyClass.Create();
  FAll := TAllClass.Create();
  FSell := TSellClass.Create();
end;

destructor TItemClass.Destroy;
begin
  FBuy.free;
  FAll.free;
  FSell.free;
  inherited;
end;

function TItemClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TItemClass.FromJsonString(AJsonString: string): TItemClass;
begin
  result := TJson.JsonToObject<TItemClass>(AJsonString)
end;

{TRootClass}

destructor TRootClass.Destroy;
var
  LItemsItem: TItemClass;
begin

 for LItemsItem in FItems do
   LItemsItem.free;

  inherited;
end;

function TRootClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TRootClass.FromJsonString(AJsonString: string): TRootClass;
begin
  result := TJson.JsonToObject<TRootClass>(AJsonString)
end;

end.

